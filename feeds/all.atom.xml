<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chino.coffee</title><link href="http://www.chino.coffee/" rel="alternate"></link><link href="http://www.chino.coffee/feeds/all.atom.xml" rel="self"></link><id>http://www.chino.coffee/</id><updated>2017-04-09T06:30:00+09:00</updated><entry><title>Siphon memo 2</title><link href="http://www.chino.coffee/siphon-memo-2.html" rel="alternate"></link><published>2017-04-09T06:30:00+09:00</published><updated>2017-04-09T06:30:00+09:00</updated><author><name>unikko</name></author><id>tag:www.chino.coffee,2017-04-09:/siphon-memo-2.html</id><summary type="html">&lt;p&gt;Siphon は一度 &lt;code&gt;view map&lt;/code&gt; を計算さえすれば &lt;code&gt;feature edges&lt;/code&gt; からストロークの生成はごく短時間で可能であるという予想で開発を進めている。そのためには &lt;code&gt;view map&lt;/code&gt; を bake する必要がある。とりあえず以下のコードで &lt;a href="https://docs.blender.org/api/blender_python_api_2_78c_release/bpy.types.RegionView3D.html?highlight=regionview3d"&gt;RegionView3D&lt;/a&gt; をロックすることができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;space_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region_3d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock_rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Viewport Shading&lt;/code&gt; で &lt;code&gt;Rendered&lt;/code&gt; にしておき、その画面を上記のコードでロックしておく。そして Siphon NodeTree 上での編集操作をフックしておいてストロークを描画する形を考えている。Render Result の方もリアルタイムに更新できないかと考えている。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siphon は一度 &lt;code&gt;view map&lt;/code&gt; を計算さえすれば &lt;code&gt;feature edges&lt;/code&gt; からストロークの生成はごく短時間で可能であるという予想で開発を進めている。そのためには &lt;code&gt;view map&lt;/code&gt; を bake する必要がある。とりあえず以下のコードで &lt;a href="https://docs.blender.org/api/blender_python_api_2_78c_release/bpy.types.RegionView3D.html?highlight=regionview3d"&gt;RegionView3D&lt;/a&gt; をロックすることができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;space_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region_3d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock_rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Viewport Shading&lt;/code&gt; で &lt;code&gt;Rendered&lt;/code&gt; にしておき、その画面を上記のコードでロックしておく。そして Siphon NodeTree 上での編集操作をフックしておいてストロークを描画する形を考えている。Render Result の方もリアルタイムに更新できないかと考えている。&lt;/p&gt;</content><category term="Blender"></category><category term="Freestyle"></category><category term="Siphon"></category></entry><entry><title>Siphon memo 1</title><link href="http://www.chino.coffee/siphon-memo-1.html" rel="alternate"></link><published>2017-04-03T06:33:02+09:00</published><updated>2017-04-03T06:33:02+09:00</updated><author><name>unikko</name></author><id>tag:www.chino.coffee,2017-04-03:/siphon-memo-1.html</id><summary type="html">&lt;p&gt;現在開発している Blender アドオン &lt;a href="https://github.com/ChinoCoffee/siphon"&gt;Siphon&lt;/a&gt; についての雑多なメモ。&lt;/p&gt;
&lt;p&gt;Siphon は &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt; の Non-photorealistic rendering engine である &lt;a href="https://docs.blender.org/manual/en/dev/render/freestyle/index.html"&gt;Freestyle&lt;/a&gt; をベースに構築する予定である。Freestyle は contour drawings に特化しており、従来のピクセル単位 &lt;code&gt;0D&lt;/code&gt; ではないストローク &lt;code&gt;1D&lt;/code&gt; という単位での表現手法を実現している。場所がバラバラになってしまうが Freestyle について GitHub 上にも&lt;a href="https://github.com/ChinoCoffee/chino-3d/wiki/Freestyle"&gt;簡単なメモ&lt;/a&gt;をまとめている。&lt;/p&gt;
&lt;p&gt;Freestyle では 3D と 2D の架け橋として &lt;code&gt;View Map&lt;/code&gt; と呼ばれる重要なデータ構造が用意されている。View Map の処理はポリゴン数が多くなるほど重くなる傾向にある。Siphon では計算した View Map をキャッシュしておき、ノード上でパラメータを変えストロークの描画をインタラクティブに行えるようにするのが目標の一つである …&lt;/p&gt;</summary><content type="html">&lt;p&gt;現在開発している Blender アドオン &lt;a href="https://github.com/ChinoCoffee/siphon"&gt;Siphon&lt;/a&gt; についての雑多なメモ。&lt;/p&gt;
&lt;p&gt;Siphon は &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt; の Non-photorealistic rendering engine である &lt;a href="https://docs.blender.org/manual/en/dev/render/freestyle/index.html"&gt;Freestyle&lt;/a&gt; をベースに構築する予定である。Freestyle は contour drawings に特化しており、従来のピクセル単位 &lt;code&gt;0D&lt;/code&gt; ではないストローク &lt;code&gt;1D&lt;/code&gt; という単位での表現手法を実現している。場所がバラバラになってしまうが Freestyle について GitHub 上にも&lt;a href="https://github.com/ChinoCoffee/chino-3d/wiki/Freestyle"&gt;簡単なメモ&lt;/a&gt;をまとめている。&lt;/p&gt;
&lt;p&gt;Freestyle では 3D と 2D の架け橋として &lt;code&gt;View Map&lt;/code&gt; と呼ばれる重要なデータ構造が用意されている。View Map の処理はポリゴン数が多くなるほど重くなる傾向にある。Siphon では計算した View Map をキャッシュしておき、ノード上でパラメータを変えストロークの描画をインタラクティブに行えるようにするのが目標の一つである。とは言うものの、&lt;a href="https://wiki.blender.org/index.php/User:Kjym3/DevFundProject/Proposal"&gt;Proposal for the Development of Blender's Non-Photorealistic Rendering Capabilities&lt;/a&gt; の Task 2 で View map caching が触れられており、もしかするとキャッシュ機構自体はすでに実装されているのかもしれない。&lt;/p&gt;
&lt;h3&gt;輪郭線編集&lt;/h3&gt;
&lt;p&gt;輪郭線編集の必要性を感じたのは以下のツイートを見たことがきっかけであった。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://twitter.com/kohta0130"&gt;@kohta0130&lt;/a&gt; 質問がたくさん来たので、こういうことです。顔を変形させなかったら、顎下のシルエットラインの影響で太って見えたり、受け口っぽく見えるんですよね。 &lt;a href="https://t.co/p26F4zJlCb"&gt;pic.twitter.com/p26F4zJlCb&lt;/a&gt;&lt;/p&gt;&amp;mdash; 森江康太 Kohta Morie (@kohta0130) &lt;a href="https://twitter.com/kohta0130/status/717962037008044032"&gt;April 7, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;この映像作品の場合、顎下のシルエットラインを 3D のモデルのポリゴンを編集することでレタッチしている。3D モデルを deform する方法については以下の記事も興味深い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blenderyard.wordpress.com/2011/09/07/mesh-deform-with-non-uniform-perspective-projection/"&gt;Mesh deform with non-uniform perspective projection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、ポリゴンではなく輪郭線を 2D 上で操作するという方法もあり得る。Freestyle の論文には、歯車の歯先を丸くするというような例が載っており、輪郭線の編集についても可能なように設計されている。さらに、あるシーンの複数フレームの View Map をキャッシュし、ターゲットの輪郭線を deform する方法があれば、アニメーションもより 3D ぽく見えないように見せることもできるようになるかもしれない。あるいは temporal coherence へ対処する一つの方法になるかもしれないと考えている。&lt;/p&gt;
&lt;h3&gt;面の交差&lt;/h3&gt;
&lt;p&gt;Freestyle でよく聞く要望点として面と面の交差部分のエッジが描画されないというものがある。実装については T.K.氏の以下のディスカッションがとても参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lists.blender.org/pipermail/bf-blender-npr/2014-February/000002.html"&gt;[Bf-blender-npr] Intersections in freestyle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;影の輪郭線&lt;/h3&gt;
&lt;p&gt;知人から 3DCG セルアニメーションの違和感として、影の輪郭線を指摘されたことがある。もし影の輪郭線も編集できれば違和感を減らせるかもしれない。&lt;/p&gt;
&lt;p&gt;Freestyle の論文では &lt;code&gt;feature lines&lt;/code&gt; の種類を将来拡張するということが future work として書かれている。影の輪郭線を追加することも可能かもしれない。その場合、discontinuity などいくつか条件を満たすかどうか調べる必要があるかもしれない。&lt;/p&gt;
&lt;p&gt;また影の領域から hatching や shading も作れるかもしれない。領域というデータ構造は Freestyle では定義されていなさそうだ。いまのところ Freestyle の SVG 出力機能として &lt;a href="https://docs.blender.org/manual/en/dev/render/freestyle/export_svg.html#exporting-fills"&gt;Exporting Fills&lt;/a&gt; というものがある。これ自体は &lt;code&gt;Contour&lt;/code&gt; 及び &lt;code&gt;External Contour&lt;/code&gt; と predicates の組み合わせによって実現されているようである。&lt;/p&gt;
&lt;h3&gt;懸念事項&lt;/h3&gt;
&lt;p&gt;いま心配しているのは、実際にアドオンとして配布する場合、PyPI の依存ライブラリを含めたインストール手法をユーザに提供可能かということだ。開発では &lt;a href="https://github.com/ChinoCoffee/chino-3d/wiki/pip"&gt;Blender に pip を導入し&lt;/a&gt;改造している。&lt;a href="https://github.com/hbldh/pyefd"&gt;PyEFD&lt;/a&gt; なら依存ライブラリが NumPy だけなので大丈夫そうだ。&lt;a href="http://www.menpo.org/"&gt;Menpo&lt;/a&gt; は &lt;a href="http://www.menpo.org/installation/pip.html"&gt;conda へのインストールを推奨している&lt;/a&gt;ぐらい依存関係が複雑なので難しい。Keras や Chainer も同様で、サーバをたててもらい RPC で連携するような形になるかもしれない。&lt;/p&gt;
&lt;h3&gt;TODO&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Freestyle の関数や predicates をノード化する&lt;/li&gt;
&lt;li&gt;planar graph の操作と PyEFD による輪郭線の編集&lt;/li&gt;
&lt;/ol&gt;</content><category term="Blender"></category><category term="Freestyle"></category><category term="Siphon"></category></entry><entry><title>Hello world</title><link href="http://www.chino.coffee/hello-world.html" rel="alternate"></link><published>2017-04-01T22:34:11+09:00</published><updated>2017-04-01T22:34:11+09:00</updated><author><name>unikko</name></author><id>tag:www.chino.coffee,2017-04-01:/hello-world.html</id><summary type="html">&lt;p&gt;こんにちは。ここでは開発しているソフトウェアの進捗などを書く予定です。&lt;/p&gt;</summary><content type="html">&lt;p&gt;こんにちは。ここでは開発しているソフトウェアの進捗などを書く予定です。&lt;/p&gt;</content></entry></feed>